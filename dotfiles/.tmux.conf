# ----------------------------------------------------------------------------
# General
# ----------------------------------------------------------------------------
set -sg escape-time 0
set -g default-terminal "screen-256color"

# Set default shell
set -g default-shell $SHELL

# Start copy mode when scrolling up
set-option -g mouse on

set-option -g mode-keys vi
set-option -g repeat-time 0

# Vi visual mode for selection & copy
set -g status-keys vi
set-window-option -g mode-keys vi

run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"

pbcopy_command="[ -x $(command -v \"pbcopy\") ]"
reattach_command_exists="[ -x $(command -v \"reattach-to-user-namespace\") ]"
reattach_pbcopy_for_older_version="[ -x $(command -v \"reattach-to-user-namespace\") ] && [ -x $(command -v \"pbcopy\") ] && [ $(echo \"$TMUX_VERSION < 2.4\" | bc) ] = 1"
reattach_pbcopy_for_newer_version="[ -x $(command -v \"reattach-to-user-namespace\") ] && [ -x $(command -v \"pbcopy\") ] && [ $(echo \"$TMUX_VERSION >= 2.4\" | bc) ] = 1"

# Use reattach-to-user-namespace if the command exists and apply copy mode key bindings depending on tmux version (76d6d36)
if-shell -b $reattach_command_exists \
    " \
    set -g default-command \"reattach-to-user-namespace -l ${SHELL}\" \
    "
if-shell -b $reattach_pbcopy_for_older_version \
    " \
    bind-key -t vi-copy 'v' begin-selection; \
    bind-key -t vi-copy y copy-pipe 'reattach-to-user-namespace pbcopy'; \
    "
if-shell -b $reattach_pbcopy_for_newer_version \
    " \
    bind-key    -T copy-mode-vi 'v'    send-keys -X begin-selection; \
    bind-key    -T copy-mode-vi 'V'     send-keys -X select-line; \
    bind-key    -T copy-mode-vi 'y'     send-keys -X copy-pipe 'reattach-to-user-namespace pbcopy'; \
    bind-key    -T copy-mode-vi Escape  send-keys -X clear-selection; \
    "

# Map vi movement keys as pane movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Retain working directory when splitting panes and creating windows
bind '%' split-window -h -c '#{pane_current_path}'  # Split panes horizontal
bind '"' split-window -v -c '#{pane_current_path}'  # Split panes vertically
bind c new-window -c '#{pane_current_path}'         # Create new window

# ----------------------------------------------------------------------------
# Colors
# ----------------------------------------------------------------------------
# Set pane colors
set-option -g pane-border-fg colour240
set-option -g pane-active-border-fg colour240

# Colorize messages in the command line
set-option -g message-bg black #base02
set-option -g message-fg brightred #orange

# ----------------------------------------------------------------------------
# Status bar
# ----------------------------------------------------------------------------
set-option -g status on                # Enable status bar
set -g status-justify centre           # Center window list

# Set status bar colors
set-option -g status-bg colour235
set-option -g status-fg yellow
set-option -g status-attr dim

# Show host name and IP address on left side of status bar
set -g status-left-length 70
set -g status-left "#[fg=white]◣#[fg=green] #h #[fg=white]>> #[fg=brightblue]#(curl icanhazip.com) #[fg=white]>> #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #[fg=white]>> #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "

# Show session name, window & pane number, and date and time on right side of status bar
set -g status-right-length 60
set -g status-right "#[fg=white]<< #[fg=blue]#S #I:#P #[fg=white]<<#[fg=yellow] %d %b %Y #[fg=white]<< #[fg=green]%l:%M %p #[fg=white]<< #[fg=brightblue]#(date -u | awk '{print $4}') #[fg=white]◢ "

# Neovim resurrect strategy
set -g @resurrect-strategy-nvim 'session'

# Plugins
if-shell -b '[ -f ~/.tmux/plugins/tpm/tpm = 1 ]' \
    " \
    set -g @plugin 'tmux-plugins/tpm' \
    set -g @plugin 'tmux-plugins/tmux-resurrect' \
    run '~/.tmux/plugins/tpm/tpm' \
    "
